<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:planner="com.simProject.planner.*"
			   minWidth="640" minHeight="480" currentState="initial"
			   pageTitle="Planner">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.simProject.planner.logic.architecture.Controller;
			import com.simProject.planner.logic.events.ControllerEvent;
			
			import mx.events.StateChangeEvent;
			
			private var controller:Controller = null;
			private var onControllerChangeState:Function = null;
			
			protected function systemPanel_currentStateChangeHandler(event:StateChangeEvent):void
			{
				if (event.newState == "running")
					run();
				else
					if (event.newState == "stoped")
						dispose();
			}
			
			public function run():void
			{
				// Создаём функции обратных вызовов
				this.onControllerChangeState = function(event:ControllerEvent):void
				{
					if (event.type == ControllerEvent.STATE_CHANGED)
						currentState = event.name;
				};
				
				// Создаём контроллёр
				controller = new Controller();
				
				// Связываем функции обратных вызово и события модели
				controller.addEventListener(ControllerEvent.STATE_CHANGED, onControllerChangeState);	
				
				controller.dispatchEvent(
					new ControllerEvent(
						ControllerEvent.STATE_CHANGED,
						controller.currentState.getName())); 				
			}
			
			public function dispose():void
			{
				if (controller == null) return;
				
				// Отвязываем представление от модели
				controller.removeEventListener(ControllerEvent.STATE_CHANGED, onControllerChangeState);
				
				// Уничтожаем функции обратных вызовов
				onControllerChangeState = null;
				
				controller.dispose();
				controller = null;
				System.gc();
				
				currentState = 'initial'				
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="initial" enterState="{trace('currentState=' + currentState)}"/>
		<s:State name="loading" enterState="{trace('currentState=' + currentState)}"/>
		<s:State name="ready" enterState="{trace('ready' + controller.model.dataDomain)}"/>
	</s:states>
	<fx:Declarations>
		<!-- Разместить невизуальные элементы (например, службы или объекты значений) -->
	</fx:Declarations>
	<s:controlBarContent>
		<planner:SystemPanel id="systemPanel"
							 currentState="stoped"
							 verticalAlign="middle"
							 currentStateChange="systemPanel_currentStateChangeHandler(event)">
		</planner:SystemPanel>
	</s:controlBarContent>
</s:Application>
